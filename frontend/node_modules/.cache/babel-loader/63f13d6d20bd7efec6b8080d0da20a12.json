{"ast":null,"code":"import $ from \"jquery\";\nexport let SiteId;\n\n(function (SiteId) {\n  SiteId[SiteId[\"Slussen\"] = 9192] = \"Slussen\";\n})(SiteId || (SiteId = {}));\n\nclass SlApiService {\n  constructor() {\n    this._realtidApiKey = \"4d2534968afe446eba10b8415adf0599\";\n  }\n\n  /**\n   * fetchRealTimeData\n   * @param siteId\n   * The Id of the station to retrieve data from\n   */\n  async fetchRealTimeData(siteId) {\n    const baseUrl = \"https://api.sl.se/api2/realtimedeparturesV4.json\";\n    const params = {\n      key: this._realtidApiKey,\n      siteid: siteId.toString(),\n      timewindow: \"60\",\n      origin: \"*\"\n    }; // const resp = await fetch(\"https://randomuser.me/api/?results=10\");\n    // console.log(await resp.json());\n    // const resp = await fetch(\n    //     \"https://api.sl.se/api2/realtimedeparturesV4\",\n    //     {\n    //         method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n    //         mode: \"no-cors\", // no-cors, *cors, same-origin\n    //         cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    //         credentials: \"same-origin\", // include, *same-origin, omit\n    //         headers: {\n    //             \"Content-Type\": \"application/json\",\n    //             // 'Content-Type': 'application/x-www-form-urlencoded',\n    //         },\n    //         redirect: \"follow\", // manual, *follow, error\n    //         referrer: \"no-referrer\", // no-referrer, *client\n    //     }\n    // );\n    // console.log(await resp.text());\n\n    try {\n      await this._fetchData(baseUrl, params); // .then(async resp => console.log(await resp.text()));\n      // console.log(await response.json()); // JSON-string from `response.json()` call\n    } catch (error) {\n      console.error(error);\n    }\n  } // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n\n\n  async _fetchData(baseUrl, params = {}) {\n    const url = new URL(\"\".concat(baseUrl));\n    Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\n    $.ajax({\n      url: url.href,\n      contentType: \"application/json\",\n      dataType: \"jsonp\",\n      responseType: \"application/json\",\n      headers: {\n        \"Access-Control-Allow-Credentials\": true,\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"GET\",\n        \"Access-Control-Allow-Headers\": \"application/json\"\n      },\n      success: function (data) {\n        console.error(data);\n      },\n      error: function (jqXHR, exception) {\n        var msg = \"\";\n\n        if (jqXHR.status === 0) {\n          msg = \"Not connected.\\n Verify Network.\";\n        } else if (jqXHR.status == 404) {\n          msg = \"Requested page not found. [404]\";\n        } else if (jqXHR.status == 500) {\n          msg = \"Internal Server Error [500].\";\n        } else if (exception === \"parsererror\") {\n          msg = \"Requested JSON parse failed.\";\n        } else if (exception === \"timeout\") {\n          msg = \"Time out error.\";\n        } else if (exception === \"abort\") {\n          msg = \"Ajax request aborted.\";\n        } else {\n          msg = \"Uncaught Error.\\n\" + jqXHR.responseText;\n        }\n\n        alert(msg);\n      }\n    }); // // Default options are marked with *\n    // return fetch(url.href, {\n    //     method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n    //     mode: \"cors\", // no-cors, *cors, same-origin\n    //     cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    //     credentials: \"include\", // include, *same-origin, omit\n    //     headers: {\n    //         // \"Content-Type\": \"application/json;charset=UTF-8\",\n    //         \"Access-Control-Allow-Origin\": \"*\",\n    //         // 'Content-Type': 'application/x-www-form-urlencoded',\n    //     },\n    //     redirect: \"follow\", // manual, *follow, error\n    //     referrer: \"no-referrer\", // no-referrer, *client\n    // });\n  }\n\n}\n\nexport const slApi = new SlApiService();","map":{"version":3,"sources":["/Users/Rasmus/sl/src/sl-api-service.ts"],"names":["$","SiteId","SlApiService","_realtidApiKey","fetchRealTimeData","siteId","baseUrl","params","key","siteid","toString","timewindow","origin","_fetchData","error","console","url","URL","Object","keys","forEach","searchParams","append","ajax","href","contentType","dataType","responseType","headers","success","data","jqXHR","exception","msg","status","responseText","alert","slApi"],"mappings":"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","sourcesContent":["import $ from \"jquery\";\n\nexport enum SiteId {\n    Slussen = 9192,\n}\n\nclass SlApiService {\n    private readonly _realtidApiKey = \"4d2534968afe446eba10b8415adf0599\";\n\n    /**\n     * fetchRealTimeData\n     * @param siteId\n     * The Id of the station to retrieve data from\n     */\n    public async fetchRealTimeData(siteId: SiteId) {\n        const baseUrl = \"https://api.sl.se/api2/realtimedeparturesV4.json\";\n        const params = {\n            key: this._realtidApiKey,\n            siteid: siteId.toString(),\n            timewindow: \"60\",\n            origin: \"*\",\n        };\n\n        // const resp = await fetch(\"https://randomuser.me/api/?results=10\");\n        // console.log(await resp.json());\n        // const resp = await fetch(\n        //     \"https://api.sl.se/api2/realtimedeparturesV4\",\n        //     {\n        //         method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n        //         mode: \"no-cors\", // no-cors, *cors, same-origin\n        //         cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n        //         credentials: \"same-origin\", // include, *same-origin, omit\n        //         headers: {\n        //             \"Content-Type\": \"application/json\",\n        //             // 'Content-Type': 'application/x-www-form-urlencoded',\n        //         },\n        //         redirect: \"follow\", // manual, *follow, error\n        //         referrer: \"no-referrer\", // no-referrer, *client\n        //     }\n        // );\n        // console.log(await resp.text());\n\n        try {\n            await this._fetchData(baseUrl, params);\n            // .then(async resp => console.log(await resp.text()));\n            // console.log(await response.json()); // JSON-string from `response.json()` call\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    private async _fetchData(baseUrl: string, params: any = {}) {\n        const url = new URL(`${baseUrl}`);\n        Object.keys(params).forEach(key =>\n            url.searchParams.append(key, params[key])\n        );\n\n        $.ajax({\n            url: url.href,\n            contentType: \"application/json\",\n            dataType: \"jsonp\",\n            responseType: \"application/json\",\n            headers: {\n                \"Access-Control-Allow-Credentials\": true,\n                \"Access-Control-Allow-Origin\": \"*\",\n                \"Access-Control-Allow-Methods\": \"GET\",\n                \"Access-Control-Allow-Headers\": \"application/json\",\n            },\n            success: function(data) {\n                console.error(data);\n            },\n            error: function(jqXHR, exception) {\n                var msg = \"\";\n                if (jqXHR.status === 0) {\n                    msg = \"Not connected.\\n Verify Network.\";\n                } else if (jqXHR.status == 404) {\n                    msg = \"Requested page not found. [404]\";\n                } else if (jqXHR.status == 500) {\n                    msg = \"Internal Server Error [500].\";\n                } else if (exception === \"parsererror\") {\n                    msg = \"Requested JSON parse failed.\";\n                } else if (exception === \"timeout\") {\n                    msg = \"Time out error.\";\n                } else if (exception === \"abort\") {\n                    msg = \"Ajax request aborted.\";\n                } else {\n                    msg = \"Uncaught Error.\\n\" + jqXHR.responseText;\n                }\n                alert(msg);\n            },\n        });\n        // // Default options are marked with *\n        // return fetch(url.href, {\n        //     method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n        //     mode: \"cors\", // no-cors, *cors, same-origin\n        //     cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n        //     credentials: \"include\", // include, *same-origin, omit\n        //     headers: {\n        //         // \"Content-Type\": \"application/json;charset=UTF-8\",\n        //         \"Access-Control-Allow-Origin\": \"*\",\n        //         // 'Content-Type': 'application/x-www-form-urlencoded',\n        //     },\n        //     redirect: \"follow\", // manual, *follow, error\n        //     referrer: \"no-referrer\", // no-referrer, *client\n        // });\n    }\n}\n\nexport const slApi = new SlApiService();\n"]},"metadata":{},"sourceType":"module"}